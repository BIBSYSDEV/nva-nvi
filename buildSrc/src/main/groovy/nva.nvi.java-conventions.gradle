plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco-report-aggregation'
    id 'com.diffplug.spotless'
}

group = 'com.github.bibsysdev'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.bundles.testing
}

java {
    sourceCompatibility = JavaVersion.VERSION_21 // source-code version and must be <= targetCompatibility
    targetCompatibility = JavaVersion.VERSION_21 // bytecode target version
}

tasks.named('test', Test) {
    useJUnitPlatform()
    failFast = false
    testLogging {
        events = ['skipped', 'passed', 'failed']
        showCauses = true
        exceptionFormat = "full"
    }
}

pmd {
    toolVersion = '7.8.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    toolVersion = "10.21.2"
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
    ignoreFailures = false
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

check.dependsOn(jacocoTestCoverageVerification)
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {

    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}

spotless {
    java {
        toggleOffOn() // Ignores sections between `spotless:off` / `spotless:on`
        googleJavaFormat().reflowLongStrings().formatJavadoc(true).reorderImports(true)
    }

    format 'misc', {
        target '.gitignore', '.gitattributes', '.editorconfig', '**/*.gradle'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

// Reformat project before build and test if needed
tasks.named('build').configure {
    dependsOn('spotlessApply')
}

tasks.named('test').configure {
    dependsOn('spotlessApply')
}
