plugins {
    id 'nva.nvi.java-conventions'
}

dependencies {
    implementation libs.aws.sdk2.sns
    implementation libs.aws.sdk2.sqs
    implementation libs.jackson.csv
    implementation nvaCatalog.aws.java.sdk.core
    implementation nvaCatalog.aws.lambda.core
    implementation nvaCatalog.aws.lambda.events
    implementation nvaCatalog.aws.sdk2.core
    implementation nvaCatalog.aws.sdk2.dynamo
    implementation nvaCatalog.aws.sdk2.eventbridge
    implementation nvaCatalog.aws.sdk2.s3
    implementation nvaCatalog.aws.sdk2.secrets
    implementation nvaCatalog.aws.sdk2.urlconnection
    implementation nvaCatalog.bundles.jena
    implementation nvaCatalog.bundles.logging
    implementation nvaCatalog.com.auth0.jwt
    implementation nvaCatalog.jackson.core
    implementation nvaCatalog.jackson.databind
    implementation nvaLibs.auth
    implementation nvaLibs.core
    implementation nvaLibs.eventhandlers
    implementation nvaLibs.json
    implementation nvaLibs.s3
    implementation nvaLibs.secrets
    implementation project(':nvi-commons')
    testFixturesAnnotationProcessor nvaCatalog.errorprone
    testFixturesImplementation libs.aws.sdk2.sns
    testFixturesImplementation nvaCatalog.aws.lambda.core
    testFixturesImplementation nvaCatalog.aws.lambda.events
    testFixturesImplementation nvaCatalog.bundles.testing.cucumber
    testFixturesImplementation nvaCatalog.bundles.testing.junit
    testFixturesImplementation nvaCatalog.com.auth0.jwt
    testFixturesImplementation nvaCatalog.hamcrest
    testFixturesImplementation nvaCatalog.mockito.core
    testFixturesImplementation nvaLibs.core
    testFixturesImplementation nvaLibs.testutils
    testFixturesImplementation project(':nvi-test')
    testFixturesImplementation(testFixtures(project(":nvi-commons")))
    testImplementation libs.dynamodDbLocal
    testImplementation nvaCatalog.assertj.core
    testImplementation nvaCatalog.bundles.testing.cucumber
    testImplementation nvaCatalog.bundles.testing.junit
    testImplementation nvaCatalog.hamcrest
    testImplementation nvaCatalog.jackson.datatype.jsr310
    testImplementation nvaCatalog.mockito.core
    testImplementation nvaLibs.logutils
    testImplementation nvaLibs.testutils
    testImplementation project(':nvi-test')
    testImplementation(testFixtures(project(":nvi-commons")))
}

test {
    useJUnitPlatform()
    environment("OUTPUT_EVENT_TOPIC", "someTopic")
    environment("TOPIC_REEVALUATE_CANDIDATES", "someTopic")
    environment("EVENT_BUS_NAME", "someEvent")
    environment("API_HOST", "api.dev.nva.aws.unit.no")
    environment("SEARCH_INFRASTRUCTURE_API_HOST", "localhost")
    environment("SEARCH_INFRASTRUCTURE_AUTH_URI", "localhost")
    environment("SEARCH_INFRASTRUCTURE_API_URI", "localhost")
    environment("NVI_TABLE_NAME", "some-table")
    environment("CUSTOM_DOMAIN_BASE_PATH", "scientific-index")
    environment("UPSERT_CANDIDATE_DLQ_QUEUE_URL", "UpsertCandidateDLQ")
    environment("PERSISTED_RESOURCE_QUEUE_URL", "PersistedResourceQueue")
    environment("DB_EVENTS_QUEUE_URL", "DbEventsQueue")
    environment("INDEX_DLQ", "IndexDlq")
    environment("EXPANDED_RESOURCES_BUCKET", "ignoredBucket")
    environment("BACKEND_CLIENT_AUTH_URL", "My url")
    environment("BACKEND_CLIENT_SECRET_NAME", "My secret name")
    environment("TOPIC_CANDIDATE_INSERT", "CANDIDATE_INSERT_TOPIC")
    environment("TOPIC_CANDIDATE_APPLICABLE_UPDATE", "CANDIDATE_APPLICABLE_UPDATE_TOPIC")
    environment("TOPIC_CANDIDATE_NOT_APPLICABLE_UPDATE", "CANDIDATE_NOT_APPLICABLE_UPDATE_TOPIC")
    environment("TOPIC_CANDIDATE_REMOVE", "CANDIDATE_REMOVE_TOPIC")
    environment("TOPIC_APPROVAL_INSERT", "APPROVAL_INSERT_TOPIC")
    environment("TOPIC_APPROVAL_UPDATE", "APPROVAL_UPDATE_TOPIC")
    environment("TOPIC_APPROVAL_REMOVE", "APPROVAL_REMOVE_TOPIC")
    environment("COGNITO_AUTHORIZER_URLS", "http://localhost:3000")
    environment("LOG_LEVEL", "debug")
}
