openapi: 3.0.3
info:
  title: NVA Scientific Index API
  version: 1.0.0
  description: Public API for scientific index candidates in NVA.
x-amazon-apigateway-request-validators:
  validate_body:
    validateRequestBody: true
    validateRequestParameters: false
paths:
  /candidate:
    get:
      description: 'Search for scientific index candidates'
      parameters:
        - in: query
          name: query
          description: 'Term to search for in candidates'
          required: false
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The offset of the search for use in pagination. Must be divisible by the size.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: The size of each page of the search for use in pagination. Default is 10.
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchNviCandidatesHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateSearchResponse"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /period:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NviPeriod'
      description: 'Create nvi period'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNviPeriodHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: "Period created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviPeriod"
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NviPeriod'
      description: 'Update nvi period'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateNviPeriodHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Period updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviPeriod"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: "Not found - period to update does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: "Conflict - new values are not supported values"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/{candidateIdentifier}:
    get:
      description: 'Get scientific index candidate'
      parameters:
        - in: path
          name: candidateIdentifier
          description: The identifer of the publication
          required: true
          schema:
            type: string
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchNviCandidateHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchNviCandidateResponse"
        '404':
          description: "Candidate not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  schemas:
    NviPeriod:
      type: object
      properties:
        publishingYear:
          type: string
        reportingDate:
          type: string
      required:
        - publishingYear
        - reportingDate
    CandidateSearchResponse:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          $ref: '#/components/schemas/Id'
        totalHits:
          type: integer
        nextResults:
          type: string
          nullable: true
          description: The uri to the next page of results, if there is one
        previousResults:
          type: string
          nullable: true
          description: The uri to the previous page of results, if there is one
        hits:
          type: array
          items:
            $ref: '#/components/schemas/CandidateIndexDocument'
    CandidateIndexDocument:
      type: object
      properties:
        identifier:
          type: string
        publicationDetails:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            title:
              type: string
            publicationDate:
              type: string
            contributors:
              type: array
              items:
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  affiliations:
                    type: array
        approvals:
          type: array
          items:
            properties:
              id:
                type: string
              labels:
                type: object
              approvalStatus:
                type: string

    FetchNviCandidateResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        publicationId:
          $ref: '#/components/schemas/Id'
        approvalStatus:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalStatus'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
    ApprovalStatus:
      type: object
      properties:
        institutionId:
          $ref: '#/components/schemas/Id'
        status:
          type: string
          enum: ['Approved','Pending','Rejected']
        finalizedBy:
          $ref: '#/components/schemas/Username'
        finalizedDate:
          type: string
    Note:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/Username'
        text:
          type: string
        createdDate:
          type: string
    Username:
      type: object
      properties:
        value:
          type: string
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Id:
      type: string
      pattern: 'https:\/\/.*$'
      description: The URI of the object ID
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: CognitoAuthorizerArn
