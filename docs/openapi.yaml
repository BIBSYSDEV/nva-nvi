openapi: 3.0.3
info:
  title: NVA Scientific Index API
  version: 1.0.0
  description: Public API for scientific index candidates in NVA.
x-amazon-apigateway-request-validators:
  validate_body:
    validateRequestBody: true
    validateRequestParameters: false
paths:
  /context:
    get:
      description: 'Get json ld context for NVI'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchNviCandidateContextHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateContext"
            application/ld+json:
              schema:
                $ref: "#/components/schemas/NviCandidateContext"
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /period:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NviPeriod'
      description: 'Create nvi period'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNviPeriodHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: "Period created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviPeriod"
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    get:
      description: 'Get Nvi Periods'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchNviPeriodsHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Periods fetched"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviPeriods"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NviPeriod'
      description: 'Update nvi period'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateNviPeriodHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Period updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviPeriod"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: "Not found - period to update does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '409':
          description: "Conflict - new values are not supported values"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /period/{periodIdentifier}:
    get:
      description: 'Get Nvi Period'
      parameters:
        - in: path
          name: periodIdentifier
          description: The identifier of the candidate
          required: true
          schema:
            type: string
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchNviPeriodHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Period fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviPeriod"
        '404':
          description: "Period not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '502':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /candidate:
    get:
      description: 'Search for scientific index candidates'
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Term to search for in NVI candidates
        - in: query
          name: affiliations
          description: 'Only return candidates in given affiliations. Including their sub-units. Formated as a comma separated list of affiliations ids.'
          required: false
          schema:
            type: string
        - in: query
          name: excludeSubUnits
          description: 'Exclude sub-units of the given affiliations.'
          required: false
          schema:
            type: boolean
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The offset of the search for use in pagination. Must be divisible by the size.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: The size of each page of the search for use in pagination. Default is 10.
        - in: query
          name: filter
          schema:
            $ref: "#/components/schemas/Filter"
          description: Filter values to use
        - in: query
          name: year
          schema:
            type: string
          description: Filters values based on year
        - in: query
          name: category
          schema:
            type: string
          description: Filters values based on category
        - in: query
          name: title
          schema:
            type: string
          description: Filters values based on title
        - in: query
          name: contributor
          schema:
            type: string
          description: Filters values based on contributor
        - in: query
          name: assignee
          schema:
            type: string
          description: Filters values based on assignee
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchNviCandidatesHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateSearchResponse"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/{candidateIdentifier}:
    get:
      description: 'Get scientific index candidate'
      parameters:
        - in: path
          name: candidateIdentifier
          description: The identifier of the candidate
          required: true
          schema:
            type: string
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchNviCandidateHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateResponse"
        '404':
          description: "Candidate not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/publication/{candidatePublicationId+}:
    get:
      description: 'Get scientific index candidate by publication identifier'
      parameters:
        - in: path
          name: candidatePublicationId+
          description: The publication identifier the candidate, this must be URI UTF-8 encoded
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchNviCandidateByPublicationIdHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateResponse"
        '404':
          description: "Candidate not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/{candidateIdentifier}/status:
    put:
      parameters:
        - in: path
          name: candidateIdentifier
          description: The identifier of the candidate
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalStatusRequest'
      description: 'Update Candidate Approval Status '
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateNviCandidateStatusHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Approval status updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateResponse"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: "Not found - approval to update does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/{candidateIdentifier}/assignee:
    put:
      parameters:
        - in: path
          name: candidateIdentifier
          description: The identifier of the candidate
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssigneeRequest'
      description: 'Update Candidate Assignee'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpsertAssigneeHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Assignee updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateResponse"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: "Not found - candidate to update does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/{candidateIdentifier}/note:
    post:
      parameters:
        - in: path
          name: candidateIdentifier
          description: The identifier of the candidate
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNoteHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Note added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateResponse"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: "Not found - candidate to update does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /candidate/{candidateIdentifier}/note/{noteIdentifier}:
    delete:
      parameters:
        - in: path
          name: candidateIdentifier
          description: The identifier of the candidate
          required: true
          schema:
            type: string
        - in: path
          name: noteIdentifier
          description: The identifier of the note
          required: true
          schema:
            type: string
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-request-validator: validate_body
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveNoteHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "Note deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NviCandidateResponse"
        '401':
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: "Not found - candidate to update does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /report/{institutionId}:
    get:
      description: 'Get NVI report for a given institution'
      parameters:
        - in: path
          name: institutionId
          description: The identifier of a top level organization in Cristin proxy. This must be a UTF-8 encoded URI
          required: true
          schema:
            type: string
      security:
        - CognitoUserPool: [
          'https://api.nva.unit.no/scopes/backend',
          'https://api.nva.unit.no/scopes/frontend',
          'aws.cognito.signin.user.admin',
        ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchReportHandler.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        '404':
          description: "Candidate not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        '500':
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  schemas:
    Filter:
      type: string
      enum:
        - pending
        - pendingCollaboration
        - assigned
        - assignedCollaboration
        - approved
        - approvedCollaboration
        - rejected
        - rejectedCollaboration
        - assignments
    NviPeriod:
      type: object
      properties:
        publishingYear:
          type: string
        reportingDate:
          type: string
        startDate:
          type: string
      required:
        - publishingYear
        - reportingDate
        - startDate
    NviPeriods:
      type: array
      items:
        $ref: '#/components/schemas/NviPeriod'
    CandidateSearchResponse:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          $ref: '#/components/schemas/Id'
        totalHits:
          type: integer
        nextResults:
          type: string
          nullable: true
          description: The uri to the next page of results, if there is one
        previousResults:
          type: string
          nullable: true
          description: The uri to the previous page of results, if there is one
        hits:
          type: array
          items:
            $ref: '#/components/schemas/CandidateIndexDocument'
    CandidateIndexDocument:
      type: object
      properties:
        identifier:
          type: string
        publicationDetails:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            title:
              type: string
            publicationDate:
              type: object
              properties:
                year:
                  type: string
                month:
                  type: string
                day:
                  type: string
            contributors:
              type: array
              items:
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  affiliations:
                    type: array
        approvals:
          type: array
          items:
            properties:
              id:
                type: string
              labels:
                type: object
              approvalStatus:
                type: string

    NviCandidateResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        publicationId:
          $ref: '#/components/schemas/Id'
        approvalStatus:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalStatus'
        points:
          type: array
          items:
            $ref: '#/components/schemas/InstitutionPoints'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        periodStatus:
          type: object
          properties:
            status:
              type: string
              enum:
                - OpenPeriod
                - ClosedPeriod
                - NoPeriod
            reportingDate:
              type: string
            startDate:
              type: string
    ApprovalStatus:
      type: object
      properties:
        institutionId:
          $ref: '#/components/schemas/Id'
        status:
          type: string
          enum: [ 'Approved','Pending','Rejected' ]
        finalizedBy:
          $ref: '#/components/schemas/Username'
        finalizedDate:
          type: string
    Note:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/Username'
        text:
          type: string
        createdDate:
          type: string
    Username:
      type: object
      properties:
        value:
          type: string
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Id:
      type: string
      pattern: 'https:\/\/.*$'
      description: The URI of the object ID
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
    InstitutionPoints:
      type: object
      properties:
        institutionId:
          $ref: '#/components/schemas/Id'
        points:
          type: number
    ApprovalStatusRequest:
      type: object
      properties:
        institutionId:
          $ref: '#/components/schemas/Id'
        status:
          type: string
          enum: [ 'Approved','Pending','Rejected' ]
        reason:
          type: string
          maxLength: 500
          description: Required if status is updated to Rejected. Reason for rejection.
      required:
        - status
    AssigneeRequest:
      type: object
      properties:
        institutionId:
          $ref: '#/components/schemas/Id'
        assignee:
          type: string
      required:
        - institutionId
        - assignee
    CreateNoteRequest:
      type: object
      properties:
        text:
          type: string
    NviCandidateContext:
      type: object
      description: NVI Candidate context
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: CognitoAuthorizerArn
