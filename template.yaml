AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS
  
  SAM Template for NVA NVI API

Parameters:
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/EventsBusName
  EventBusArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/EventsBusArn
  ResourcesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/PersistedEntriesBucketName
  OpenSearchEndpoint:
    Type: String
    Default: 'https://api.sws.aws.sikt.no'

Resources:
  #=============================== SQSs ============================================================
  NewCandidateQueue:
    Type: AWS::SQS::Queue
  NewCandidateDLQ:
    Type: AWS::SQS::Queue

  #============================= Permissions =======================================================
  NvaNviRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: readFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - events:*
                Resource: '*'
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                Resource:
                  - !Ref EventBusArn
                  - !GetAtt NewCandidateQueue.Arn
                  - !GetAtt NewCandidateDLQ.Arn
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'

  #============================= Handlers ==========================================================
  EvaluateNVICandidateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-evaluator
      Handler: no.sikt.nva.nvi.evaluator.EvaluateNviCandidateHandler::handleRequest
      Runtime: java17
      Role: !GetAtt NvaNviRole.Arn
      Environment:
        Variables:
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  topic: [ "PublicationService.ExpandedEntry.Persisted" ]
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: SQS
            Destination: !GetAtt NewCandidateQueue.Arn
          OnFailure:
            Type: SQS
            Destination: !GetAtt NewCandidateDLQ.Arn

  IndexNviCandidateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: index-handlers
      Handler: no.sikt.nva.nvi.index-handlers.IndexNviCandidateHandler::handleRequest
      Runtime: java17
      Role: !GetAtt NvaNviRole.Arn
      Environment:
        Variables:
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
          OPENSEARCH_ENDPOINT: !Ref OpenSearchEndpoint
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewCandidateQueue.Arn