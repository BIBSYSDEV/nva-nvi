AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS
  
  SAM Template for NVA NVI API

Globals:
  Function:
    Timeout: 20
    Runtime: java17
    MemorySize: 1536
    Environment:
      Variables:
        NVI_TABLE_NAME: !Ref NvaNviTable
        SEARCH_INFRASTRUCTURE_API_HOST: !Ref SearchInfrastructureApiHost
        SEARCH_INFRASTRUCTURE_AUTH_URI: !Ref SearchInfrastructureAuthUri
        CUSTOM_DOMAIN_BASE_PATH: !Ref CustomDomainBasePath
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Location'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CognitoAuthorizationUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/CognitoUri'
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/EventsBusName
  EventBusArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/EventsBusArn
  ResourcesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/PersistedEntriesBucketName
  NewCandidateQueueName:
    Type: String
    Default: NewCandidateQueue
  NewCandidateDLQName:
    Type: String
    Default: NewCandidateDLQ
  SearchInfrastructureApiHost:
    Type: String
    Description: Host of external search infrastructure API (SWS).
    Default: 'https://api.sws.aws.sikt.no'
  SearchInfrastructureAuthUri:
    Type: String
    Description: URI to auth for external search infrastructure API (SWS).
    Default: 'https://sws-auth.auth.eu-west-1.amazoncognito.com'
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: scientific-index
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  #=============================== SQSs ============================================================
  NewCandidateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref NewCandidateQueueName
  NewCandidateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref NewCandidateDLQName
      MessageRetentionPeriod: 43200

  #============================= Permissions =======================================================
  NvaNviRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: readFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - events:*
                  - secretsmanager:*
                Resource: '*'
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource:
                  - !Ref EventBusArn
                  - !GetAtt NewCandidateQueue.Arn
                  - !GetAtt NewCandidateDLQ.Arn
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt NewCandidateQueue.Arn
        - PolicyName: readSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: invokeFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
        - PolicyName: crudDynamodb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeLimits
                  - dynamodb:DescribeReservedCapacity
                  - dynamodb:DescribeReservedCapacityOfferings
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:ListStreams
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt NvaNviTable.Arn
        - PolicyName: crudDynamoDbIndex
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/nva-nvi-${AWS::StackName}/index/*
        - PolicyName: DynamoDbStreamAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:GetRecords
                Resource:
                  - !GetAtt NvaNviTable.StreamArn


  #============================= Roles ==========================================================
  ScientificIndexApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml

  #===========================BasePathMappings========================================================
  NviBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref ScientificIndexApi
      Stage: !Ref ScientificIndexApi.Stage

  #============================= Handlers ==========================================================
  EvaluateNVICandidateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-evaluator
      Handler: no.sikt.nva.nvi.evaluator.EvaluateNviCandidateHandler::handleRequest
      Runtime: java17
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 30
      MemorySize: 1536
      Environment:
        Variables:
          BACKEND_CLIENT_AUTH_URL: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
          API_HOST: !Ref ApiDomain
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
          CANDIDATE_QUEUE_NAME: !Ref NewCandidateQueueName
          CANDIDATE_DLQ_NAME: !Ref NewCandidateDLQName
      AutoPublishAlias: live
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  topic: [ "PublicationService.ExpandedEntry.Persisted" ]

  UpdateIndexHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Listens to DynamoDbStream and creates, modifies and deletes record from nvi-index'
      CodeUri: index-handlers
      Handler: no.sikt.nva.nvi.index.UpdateIndexHandler::handleRequest
      Timeout: 30
      MemorySize: 1536
      Role: !GetAtt NvaNviRole.Arn
      AutoPublishAlias: live
      Environment:
        Variables:
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
          BACKEND_CLIENT_AUTH_URL: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
      Events:
        FanoutSource:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt NvaNviTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: true

  UpsertNviCandidateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: event-handlers
      Handler: no.sikt.nva.nvi.events.UpsertNviCandidateHandler::handleRequest
      Timeout: 30
      MemorySize: 1536
      Role: !GetAtt NvaNviRole.Arn
      AutoPublishAlias: live
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewCandidateQueue.Arn

  CreateNviPeriodHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.create.CreateNviPeriodHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /period
            Method: post
            RestApiId: !Ref ScientificIndexApi

  FetchNviPeriodsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.fetch.FetchNviPeriodsHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /period
            Method: get
            RestApiId: !Ref ScientificIndexApi

  UpdateNviPeriodHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.upsert.UpdateNviPeriodHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /period
            Method: put
            RestApiId: !Ref ScientificIndexApi

  SearchNviCandidatesHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: index-handlers
      Handler: no.sikt.nva.nvi.index.SearchNviCandidatesHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
          COGNITO_HOST: !Ref CognitoAuthorizationUri
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /candidate
            Method: get
            RestApiId: !Ref ScientificIndexApi

  DeleteNviCandidateIndexHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that deletes scientific index. Needs to be run manually from Test
      CodeUri: index-handlers
      Handler: no.sikt.nva.nvi.index.DeleteNviIndexHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn

  # ======================= API HANDLERS ========================

  FetchNviCandidateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.fetch.FetchNviCandidateHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /candidate/{candidateIdentifier}
            Method: get
            RestApiId: !Ref ScientificIndexApi

  UpdateNviCandidateStatusHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.upsert.UpdateNviCandidateStatusHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          API_HOST: !Ref ApiDomain
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /candidate/{candidateIdentifier}/status
            Method: put
            RestApiId: !Ref ScientificIndexApi

  UpsertAssigneeHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.upsert.UpsertAssigneeHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          BACKEND_CLIENT_AUTH_URL: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
          COGNITO_HOST: !Ref CognitoAuthorizationUri
          API_HOST: !Ref ApiDomain
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /candidate/{candidateIdentifier}/assignee
            Method: put
            RestApiId: !Ref ScientificIndexApi

  CreateNoteHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.create.CreateNoteHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          BACKEND_CLIENT_AUTH_URL: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
          COGNITO_HOST: !Ref CognitoAuthorizationUri
          API_HOST: !Ref ApiDomain
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /candidate/{candidateIdentifier}/note
            Method: post
            RestApiId: !Ref ScientificIndexApi

  RemoveNoteHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: nvi-rest
      Handler: no.sikt.nva.nvi.rest.remove.RemoveNoteHandler::handleRequest
      Role: !GetAtt NvaNviRole.Arn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          BACKEND_CLIENT_AUTH_URL: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
          COGNITO_HOST: !Ref CognitoAuthorizationUri
          API_HOST: !Ref ApiDomain
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /candidate/{candidateIdentifier}/note/{noteIdentifier}
            Method: delete
            RestApiId: !Ref ScientificIndexApi

  #============================= Database =========================================================
  NvaNviTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub 'nva-nvi-${AWS::StackName}'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PrimaryKeyHashKey
          AttributeType: S
        - AttributeName: PrimaryKeyRangeKey
          AttributeType: S
        - AttributeName: SecondaryIndex1HashKey
          AttributeType: S
        - AttributeName: SecondaryIndex1RangeKey
          AttributeType: S
      KeySchema:
        - AttributeName: PrimaryKeyHashKey
          KeyType: HASH
        - AttributeName: PrimaryKeyRangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SearchByPublicationId
          KeySchema:
            - AttributeName: SecondaryIndex1HashKey
              KeyType: HASH
            - AttributeName: SecondaryIndex1RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES