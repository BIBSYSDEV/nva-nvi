package no.sikt.nva.nvi.common.db;

import static no.sikt.nva.nvi.common.DatabaseConstants.HASH_KEY;
import static no.sikt.nva.nvi.common.DatabaseConstants.LAST_WRITTEN_FIELD;
import static no.sikt.nva.nvi.common.DatabaseConstants.REVISION_FIELD;
import static no.sikt.nva.nvi.common.DatabaseConstants.SORT_KEY;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.util.Objects;
import no.sikt.nva.nvi.common.db.CandidateUniquenessEntryDao.Builder;
import nva.commons.core.JacocoGenerated;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedTimestampAttribute;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbVersionAttribute;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbAttribute;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbIgnore;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbImmutable;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSortKey;

@DynamoDbImmutable(builder = Builder.class)
public final class CandidateUniquenessEntryDao extends Dao {

  public static final String TYPE = "CandidateUniquenessEntry";
  public static final String VERSION = "version";
  private final String partitionKey;
  private final String sortKey;
  private final String version;
  private final Long revision;
  private final Instant lastWrittenAt;

  @JsonCreator
  public CandidateUniquenessEntryDao(
      @JsonProperty(HASH_KEY) String partitionKey,
      @JsonProperty(SORT_KEY) String sortKey,
      @JsonProperty(VERSION) String version,
      @JsonProperty(REVISION_FIELD) Long revision,
      @JsonProperty(LAST_WRITTEN_FIELD) Instant lastWrittenAt) {
    super();
    this.partitionKey = partitionKey;
    this.sortKey = sortKey;
    this.version = version;
    this.revision = revision;
    this.lastWrittenAt = lastWrittenAt;
  }

  public CandidateUniquenessEntryDao(String identifier) {
    this(pk0(identifier), pk0(identifier), null, null, null);
  }

  @JacocoGenerated
  public static Builder builder() {
    return new Builder();
  }

  @JacocoGenerated
  @Override
  @DynamoDbPartitionKey
  @DynamoDbAttribute(HASH_KEY)
  public String primaryKeyHashKey() {
    return partitionKey;
  }

  @JacocoGenerated
  @Override
  @DynamoDbSortKey
  @DynamoDbAttribute(SORT_KEY)
  public String primaryKeyRangeKey() {
    return sortKey;
  }

  @Override
  public String version() {
    return version;
  }

  @JacocoGenerated
  @Override
  @DynamoDbAttribute(TYPE_FIELD)
  public String type() {
    return TYPE;
  }

  public String partitionKey() {
    return partitionKey;
  }

  public String sortKey() {
    return sortKey;
  }

  @DynamoDbIgnore
  public Builder copy() {
    return builder()
        .partitionKey(partitionKey)
        .sortKey(sortKey)
        .version(version)
        .revision(revision)
        .lastWrittenAt(lastWrittenAt);
  }

  @Override
  @DynamoDbVersionAttribute
  public Long revision() {
    return revision;
  }

  @Override
  @DynamoDbAutoGeneratedTimestampAttribute
  public Instant lastWrittenAt() {
    return lastWrittenAt;
  }

  @Override
  @JacocoGenerated
  public int hashCode() {
    return Objects.hash(partitionKey, sortKey, version, revision, lastWrittenAt);
  }

  @Override
  @JacocoGenerated
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null || obj.getClass() != this.getClass()) {
      return false;
    }
    var that = (CandidateUniquenessEntryDao) obj;
    return Objects.equals(this.partitionKey, that.partitionKey)
        && Objects.equals(this.sortKey, that.sortKey)
        && Objects.equals(this.version, that.version)
        && Objects.equals(this.revision, that.revision)
        && Objects.equals(this.lastWrittenAt, that.lastWrittenAt);
  }

  @Override
  @JacocoGenerated
  public String toString() {
    return "CandidateUniquenessEntryDao["
        + "partitionKey="
        + partitionKey
        + ", "
        + "sortKey="
        + sortKey
        + ", "
        + "version="
        + version
        + ", "
        + "revision="
        + revision
        + ", "
        + "lastWrittenAt="
        + lastWrittenAt
        + ']';
  }

  @DynamoDbIgnore
  private static String pk0(String identifier) {
    return TYPE + FIELD_DELIMITER + identifier;
  }

  @JacocoGenerated
  public static final class Builder {

    private String builderPartitionKey;
    private String builderSortKey;
    private String builderVersion;
    private Long builderRevision;
    private Instant builderLastWritten;

    private Builder() {}

    @JacocoGenerated
    public Builder primaryKeyHashKey(String noop) {
      // Used by @DynamoDbImmutable for building the object
      return this;
    }

    @JacocoGenerated
    public Builder primaryKeyRangeKey(String noop) {
      // Used by @DynamoDbImmutable for building the object
      return this;
    }

    @JacocoGenerated
    public Builder type(String noop) {
      // Used by @DynamoDbImmutable for building the object
      return this;
    }

    public Builder partitionKey(String partitionKey) {
      this.builderPartitionKey = partitionKey;
      return this;
    }

    public Builder sortKey(String sortKey) {
      this.builderSortKey = sortKey;
      return this;
    }

    public Builder version(String version) {
      this.builderVersion = version;
      return this;
    }

    public Builder revision(Long revision) {
      this.builderRevision = revision;
      return this;
    }

    public Builder lastWrittenAt(Instant lastWrittenAt) {
      this.builderLastWritten = lastWrittenAt;
      return this;
    }

    public CandidateUniquenessEntryDao build() {
      return new CandidateUniquenessEntryDao(
          builderPartitionKey, builderSortKey, builderVersion, builderRevision, builderLastWritten);
    }
  }
}
