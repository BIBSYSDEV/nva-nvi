PREFIX : <https://nva.sikt.no/ontology/publication#>
# This builds a flattened and simplified version of an expanded publication.
# We assume the JSON contains a single publication object, and we extract the relevant fields.
# In order to handle edge-cases and to guard against missing data, we use tricks like
# OPTIONAL, COALESCE, and SAMPLE to ensure the output is as complete as possible.
# This means that even if a field is set as OPTIONAL in this query, it probably should never be
# missing in production data.
# NOTE: The query filters out fields/values that are assumed to be invalid for an NVI candidate.

CONSTRUCT {
  # Build a simplified version of the main publication object
  ?publication a :Publication ;
  :identifier ?identifier ;
  :title ?title ;
  :status ?status ;
  :language ?language ;
  :abstractText ?abstract ;
  :pageCount ?pageCount ;
  :publicationDate ?date ;
  :publicationType ?instanceType ;
  :isApplicable ?isApplicable ;
  :isInternationalCollaboration ?isInternationalCollaboration ;
  :publicationChannel ?channel ;
  :contributor ?personId ;
  :topLevelOrganization ?topLevelOrganization ;
  :modifiedDate ?modifiedDate .

  # Include page count
  ?pageCount a :PageCount ;
  :firstPage ?firstPage ;
  :lastPage ?lastPage ;
  :numberOfPages ?numberOfPages  .

  # Include publication channels
  ?channel a :PublicationChannel ;
  :channelType ?channelType ;
  :identifier ?channelIdentifier ;
  :name ?channelName ;
  :scientificValue ?scientificValue ;
  :year ?channelYear ;
  :onlineIssn ?onlineIssn ;
  :printIssn ?printIssn .

  # Include the publication date
  ?date a :PublicationDate ;
  :year ?year ;
  :month ?month ;
  :day ?day .

  # Include the organization hierarchy
  ?organization a :Organization ;
  :country ?country ;
  :label ?label ;
  :partOf ?parent ;
  :hasPart ?child .

  # Include all contributors
  ?personId a :Contributor ;
  :affiliation ?affiliation ;
  :role ?roleType ;
  :verificationStatus ?verificationStatus ;
  :name ?contributorName .
}

WHERE {
  # Find the main publication object and top-level values
  ?publication a :Publication .
  ?publication :status ?status .
  {
    OPTIONAL { ?publication :identifier ?identifier }
    OPTIONAL { ?publication :modifiedDate ?modifiedDate }
  } UNION {
    # Find basic values under the entityDescription node
    ?publication :entityDescription ?entityDescription .
    OPTIONAL { ?entityDescription :abstract ?abstract }
    OPTIONAL { ?entityDescription :mainTitle ?title }
    OPTIONAL { ?entityDescription :language ?language }
  } UNION {
    # Find page count
    ?publication :entityDescription ?entityDescription .
    ?entityDescription :reference ?reference .
    ?reference a :Reference .
    ?reference :publicationInstance ?instance .
    ?instance :pages ?pageCount .
    OPTIONAL { ?pageCount :pages ?numberOfPages }
    OPTIONAL { ?pageCount :begin ?firstPage }
    OPTIONAL { ?pageCount :end ?lastPage }
  } UNION {
    # Find the publication date
    ?publication :entityDescription ?entityDescription .
    ?entityDescription :publicationDate ?date .
    ?date a :PublicationDate .
    ?date :year ?year
    OPTIONAL { ?date :month ?month }
    OPTIONAL { ?date :day ?day }
  } UNION {
    # Find all publication channels
    ?reference a :Reference ;
    :publicationInstance ?instance .
    ?instance a ?instanceType .
    VALUES ?journalPublications {
      :AcademicArticle :AcademicLiteratureReview
    }
    VALUES ?nonJournalPublications {
      :AcademicMonograph :AcademicCommentary :AcademicChapter
    }
    # In rare cases a channel can be listed as both a Journal and a Series, but only one of these
    # is relevant for a given publication type.
    # This filter should ensure that we only keep relevant channel types.
    ?channel a ?channelType .
    FILTER (
    ( ?channelType = :Journal && ?instanceType IN (?journalPublications) ) ||
    ( ?channelType IN (:Series, :Publisher) && ?instanceType IN (?nonJournalPublications) )
    )

    OPTIONAL { ?channel :scientificValue ?scientificValue }
    OPTIONAL { ?channel :name ?channelName }
    OPTIONAL { ?channel :identifier ?channelIdentifier }
    OPTIONAL { ?channel :year ?channelYear }
    OPTIONAL { ?channel :onlineIssn ?onlineIssn }
    OPTIONAL { ?channel :printIssn ?printIssn }
  } UNION {
    # Check whether the publication is 'applicable', i.e. can be an NVI candidate
    ?publication a :Publication ;
    :status ?status .

    # Find publication type (if applicable)
    VALUES ?applicablePublicationType {
      :AcademicMonograph :AcademicCommentary :AcademicChapter :AcademicArticle :AcademicLiteratureReview
    }
    ?reference a :Reference ;
    :publicationInstance ?instance .
    ?instance a ?instanceType .

    # Filter on valid status and publication type
    FILTER (?status = :PUBLISHED)
    FILTER (?instanceType = ?applicablePublicationType)

    # If the publication is part of a series with a scientific value set, use that for filtering.
    # Otherwise, check other channels for a valid scientific value.
    OPTIONAL {
      ?series a :Series ;
      :scientificValue ?seriesLevel .
      FILTER (?seriesLevel != "Unassigned")
    }
    BIND(COALESCE(?series, ?channel) AS ?channelForLevel)

    # Filter on the scientific value of the channel
    BIND(EXISTS {
      VALUES ?applicableLevel {"LevelOne" "LevelTwo"}
      ?channelForLevel :scientificValue ?scientificLevel .
      FILTER(?scientificLevel = ?applicableLevel)
    } AS ?isApplicable)
  } UNION {
    # Find all organizations
    ?organization a :Organization .
    OPTIONAL { ?organization :partOf ?parent }
    OPTIONAL { ?organization :hasPart ?child }
    OPTIONAL { ?organization :label ?label }
    OPTIONAL { ?organization :country ?country }
  } UNION {
    # Find all contributors
    ?publication :entityDescription ?entityDescription .
    ?entityDescription :contributor ?contributor .

    ?contributor :identity ?personId ;
    :role ?role .
    ?role a ?roleType .
    OPTIONAL { ?personId :verificationStatus ?verificationStatus }
    OPTIONAL {
      ?personId :name ?contributorName
      # In rare cases, multiple names are given for the same contributor, but we need at most one.
      # This filter works as a "MAX(name)" while avoiding the use of subqueries.
      FILTER NOT EXISTS {
        ?personId :name ?otherName .
        FILTER(?otherName > ?contributorName)
      }
    }

    # Find all valid affiliations for the contributor
    OPTIONAL {
      ?contributor :affiliation ?affiliation .
      ?affiliation a :Organization .
      FILTER(isIRI(?affiliation))

      # Find the top-level organization for each affiliation
      OPTIONAL {
        ?affiliation :partOf* ?topLevelOrganization .
        ?topLevelOrganization a :Organization .
        FILTER(isIRI(?topLevelOrganization))
        FILTER NOT EXISTS { ?topLevelOrganization :partOf ?parent }
      }
    }

    # Check if any contributor is a Creator with a non-Norwegian affiliation.
    # If so, the publication counts as an international collaboration.
    OPTIONAL {
      BIND(EXISTS {
        ?contributor :role [ a :Creator ] ;
        :affiliation [ :country ?countryCode ] .
        FILTER (?countryCode != "NO")
      } AS ?isInternationalCollaboration
      )
    }
  }
}
